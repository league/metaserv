<?~=lift(preamble "GC statistics")?>
<?~=lift(navbar "/gc")?>
<?^open Gc open Buffer
   let interval = 3 let delim = ","
   let fmt s =
     let n = String.length s in
     let buf = create (n*2) in add_string buf "<b>";
     let i = ref((n-1) mod interval + 1) in
     add_string buf (String.sub s 0 (!i));
     while !i < n do
       add_string buf delim;
       add_string buf (String.sub s (!i) interval);
       i := !i + interval
     done;
     add_string buf "</b>";
     contents buf
   let i n = fmt (string_of_int n)
   let f m = fmt (Printf.sprintf "%.0f" m) ?>
<h1>Garbage collector statistics</h1>
<?let st = stat() ?>
<dl><dt>minor words: <?=f st.minor_words ?></dt> 
 <dd>Number of words allocated in the minor heap since
   the program was started.  This number is accurate in
   byte-code programs, but only an approximation in 
   programs compiled to native code.</dd>
 <dt>promoted words: <?=f st.promoted_words ?></dt>
 <dd>Number of words allocated in the minor heap that
   survived a minor collection and were moved to the 
   major heap since the program was started.</dd>

<dt>major words: <?=f st.major_words ?></dt>
<dd>Number of words allocated in the major heap, including
   the promoted words, since the program was started.</dd>

<dt>minor collections: <?=i st.minor_collections ?></dt>
<dd>Number of minor collections since the program was started.</dd>

<dt>major collections: <?=i st.major_collections ?></dt>
<dd>Number of major collection cycles completed since the program
    was started.</dd>

<dt>heap words: <?=i st.heap_words ?></dt>
<dd>Total size of the major heap, in words.</dd>

<dt>heap chunks: <?=i st.heap_chunks ?></dt>
<dd>Number of contiguous pieces of memory that make up the major heap.</dd>

<dt>live words: <?=i st.live_words ?></dt>
<dd>Number of words of live data in the major heap, including the header
   words.</dd>

<dt>live blocks: <?=i st.live_blocks ?></dt>
<dd>Number of live blocks in the major heap.</dd>

<dt>free words: <?=i st.free_words ?></dt>
<dd>Number of words in the free list.</dd>

<dt>free blocks: <?=i st.free_blocks ?></dt>
<dd>Number of blocks in the free list.</dd>

<dt>largest free: <?=i st.largest_free ?></dt>
<dd>Size (in words) of the largest block in the free list.</dd>

<dt>fragments: <?=i st.fragments ?></dt>
<dd>Number of wasted words due to fragmentation.  These are
   1-words free blocks placed between two live blocks.  They
   are not available for allocation.</dd>

<dt>compactions: <?=i st.compactions ?></dt>
<dd>Number of heap compactions since the program was started.</dd>

<dt>top heap words: <?=i st.top_heap_words ?></dt>
<dd>Maximum size reached by the major heap, in words.</dd>
</dl>
<?=postamble?>
